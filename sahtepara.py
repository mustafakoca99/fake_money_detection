# -*- coding: utf-8 -*-
"""sahtepara.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FGjy957ea4DgQyYwycxTRmVONtyEDMyV
"""

# Commented out IPython magic to ensure Python compatibility.
#kütüphaneleri tanımlıyoruz
import os
from torch.utils.data import DataLoader
from torchvision.datasets import ImageFolder
import torchvision.transforms as T
import torch
from torchvision.utils import make_grid
import matplotlib.pyplot as plt
# %matplotlib inline
import jovian
import torch.nn as nn
from torchvision.utils import save_image
from tqdm.notebook import tqdm
import torch.nn.functional as F
from IPython.display import Image
import cv2

!pip install jovian --upgrade --quiet #jovian kütüphanesini indiriyor güncelliyoruz.

#google drive üzerinden verileri alıyoruz.
#sebebi ikidebir google clab üzerinden eklememek. sürekli çalışmasını sağlamak.
from google.colab import drive
drive.mount('/content/drive')

DATA_DIR = '/content/drive/My Drive/pararesimleri' #resim klasörünün yolunu belirttik. mydrive için.

print(os.listdir(DATA_DIR)) #klasörleri liste şeklinde yazdırdık

print(os.listdir(DATA_DIR+'/5')[:7]) #5 klasörünün içinde ki dosyaları 7 adetini yazdırdık. [:3] yazarsak 3 resimi alır.

#sürekli yazmamak için burada tanımlama yaptık
image_size = 64
batch_size = 128
stats = (0.5, 0.5, 0.5), (0.5, 0.5, 0.5)

# kısaca görüntüleri işliyoruz.
train_ds = ImageFolder(DATA_DIR, transform=T.Compose([
    T.Resize(image_size),
    T.CenterCrop(image_size),
    T.ToTensor(),
    T.Normalize(*stats)]))

train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=3, pin_memory=True) #ve yükleme işlemini yapıyoruz. batch ve train deperlerine göre.

def denorm(img_tensors):
    return img_tensors * stats[1][0] + stats[0][0] # burada iki verinin tutulması ve toplanması için gerekli fonksiyonu yazdık

#resmin 8'e 8 kare şeklinde görünmesi için gerekli fonksiyon.
#içerisinde ki değerleri değiştirirsek çıktı değişir.
#mesela 8,8 değil 4,4 yaparsak. ama yapmayalım algoritma buna göre kodlandı.
def show_images(images, nmax=64):
    fig, ax = plt.subplots(figsize=(8, 8))
    ax.set_xticks([]); ax.set_yticks([])
    ax.imshow(make_grid(denorm(images.detach()[:nmax]), nrow=8).permute(1, 2, 0))

def show_batch(dl, nmax=64):
    for images, _ in dl:
        show_images(images, nmax)
        break

show_batch(train_dl) #yukarıda  işlediğimiz verilere göre resimleri göstereceğimiz fonksiyona yerleştiriyoruz.

#pc hangisini destekliyorsa cpu, gpu seçimi yapıyor. güzel bir yapay zeka algoritması.

def get_default_device():
    """Varsa GPU'yu, yoksa CPU'yu seçin"""
    if torch.cuda.is_available():
        return torch.device('cuda')
    else:
        return torch.device('cpu')
    
def to_device(data, device):
    """Tensör(ler)i seçilen cihaza taşıyın"""
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

class DeviceDataLoader():
    """Verileri bir cihaza taşımak için bir veri yükleyiciyi sarın"""
    def __init__(self, dl, device):
        self.dl = dl
        self.device = device
        
    def __iter__(self):
        """Cihaza taşıdıktan sonra bir grup veri elde edin"""
        for b in self.dl: 
            yield to_device(b, self.device)

    def __len__(self):
        """Parti sayısı"""
        return len(self.dl)

device = get_default_device() #seçilen seçimi device değişkenine atayıp görmemizi sağlıyoruz.
device

train_dl = DeviceDataLoader(train_dl, device)  #verileri bir cihaz yüklemeye sardığımız zaman yani cihaz yüklendiğinde değerleri yukarda ki fonksiyona göre ayarlıyor.

#KERNEL: Bir çekirdeğin (veya evrişim matrisinin ) ne olduğunu tanıtmama izin verin . 
#Bir çekirdek, bir girdi görüntüsünün üzerinden geçireceğimiz bir filtreyi tanımlar . 
#Basitleştirmek için, çekirdek bir evrişim ürünü uygulayarak soldan sağa, yukarıdan aşağıya tüm görüntünün üzerinde hareket edecektir . 
#Bu işlemin çıktısına filtrelenmiş görüntü adı verilir .

# kısaca fotoda ki özellikleri saptamaktır

discriminator = nn.Sequential(

    nn.Conv2d(3, 64, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(64),
    nn.LeakyReLU(0.2, inplace=True),

    nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(128),
    nn.LeakyReLU(0.2, inplace=True),

    nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(256),
    nn.LeakyReLU(0.2, inplace=True),

    nn.Conv2d(256, 512, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(512),
    nn.LeakyReLU(0.2, inplace=True),

    nn.Conv2d(512, 1, kernel_size=4, stride=1, padding=0, bias=False),

    nn.Flatten(),
    nn.Sigmoid())

discriminator = to_device(discriminator, device) #hata

latent_size = 128 #gizlilik boyutu... kısaca kernel tarafında kullandığımız yapıda gerekli işlem. batch size boyutuyla aynı olması doğruıdur.

generator = nn.Sequential(

    nn.ConvTranspose2d(latent_size, 512, kernel_size=4, stride=1, padding=0, bias=False),
    nn.BatchNorm2d(512),
    nn.ReLU(True),

    nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(256),
    nn.ReLU(True),

    nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(128),
    nn.ReLU(True),

    nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(64),
    nn.ReLU(True),

    nn.ConvTranspose2d(64, 3, kernel_size=4, stride=2, padding=1, bias=False),
    nn.Tanh()
)

#rastgele gizli tensörler
xb = torch.randn(batch_size, latent_size, 1, 1) 
fake_images = generator(xb)
print(fake_images.shape)
show_images(fake_images)

generator = to_device(generator, device) #hata

def train_discriminator(real_images, opt_d):
    #discriminator gradyanları temizle (ayrımcılık için kullanılan vs. discriminator: ayrımcılık.)
    opt_d.zero_grad()

    # Gerçek görüntüleri ayırt ediciden geçirin
    real_preds = discriminator(real_images)
    real_targets = torch.ones(real_images.size(0), 1, device=device)
    real_loss = F.binary_cross_entropy(real_preds, real_targets)
    real_score = torch.mean(real_preds).item()
    
    # Sahte görüntüler oluştur
    latent = torch.randn(batch_size, latent_size, 1, 1, device=device)
    fake_images = generator(latent)

    # Sahte görüntüleri ayrımcıdan geçirin
    fake_targets = torch.zeros(fake_images.size(0), 1, device=device)
    fake_preds = discriminator(fake_images)
    fake_loss = F.binary_cross_entropy(fake_preds, fake_targets)
    fake_score = torch.mean(fake_preds).item()

    # dicriminator (ayrımcı) ağırlıklarını güncelle
    loss = real_loss + fake_loss
    loss.backward()
    opt_d.step()
    return loss.item(), real_score, fake_score

def train_generator(opt_g):
    # generator gradyanlarını temizle
    opt_g.zero_grad()
    
    # Sahte görüntüler oluştur
    latent = torch.randn(batch_size, latent_size, 1, 1, device=device)
    fake_images = generator(latent)
    
    # discriminate kandırmaya çalışın
    preds = discriminator(fake_images)
    targets = torch.ones(batch_size, 1, device=device)
    loss = F.binary_cross_entropy(preds, targets)
    
    # generatorleri güncelle
    loss.backward()
    opt_g.step()
    
    return loss.item()

sample_dir = 'generated' #tanımlama
#özyinelemeli bir dizin oluşturmak için kullanılır. 
#Bu, yaprak dizini yaparken herhangi bir ara düzey dizin eksikse, os.makedirs() yönteminin hepsini oluşturacağı anlamına gelir .
os.makedirs(sample_dir, exist_ok=True)

#rastgele resimleri vs kaydetme
def save_samples(index, latent_tensors, show=True):
    fake_images = generator(latent_tensors)
    fake_fname = 'generated-images-{0:0=4d}.png'.format(index)
    save_image(denorm(fake_images), os.path.join(sample_dir, fake_fname), nrow=8)
    print('Saving', fake_fname)
    if show:
        fig, ax = plt.subplots(figsize=(8, 8))
        ax.set_xticks([]); ax.set_yticks([])
        ax.imshow(make_grid(fake_images.cpu().detach(), nrow=8).permute(1, 2, 0))

fixed_latent = torch.randn(64, latent_size, 1, 1, device=device) #random resimler için fotoğraf seçim ayarı 64 yerine baika bişi yazarsak o kadar resim çıkar.
# fakat değimemeli algoritma karışır..

save_samples(0, fixed_latent) # oluşan resimler savetempltaes fonksiyonu ile kaydediyoruz.

#eğitim için gerekli fonksiyon
def fit(epochs, lr, start_idx=1):
    torch.cuda.empty_cache()
    
    # Kayıplar ve puanlar
    losses_g = []
    losses_d = []
    real_scores = []
    fake_scores = []
    
    # Optimize ediciler oluşturun
    opt_d = torch.optim.Adam(discriminator.parameters(), lr=lr, betas=(0.5, 0.999))
    opt_g = torch.optim.Adam(generator.parameters(), lr=lr, betas=(0.5, 0.999))
    
    for epoch in range(epochs):
        for real_images, _ in tqdm(train_dl):
            # sahte, gerçek, başarısız ayrımcı
            loss_d, real_score, fake_score = train_discriminator(real_images, opt_d)
            # eğitim generatoru.
            loss_g = train_generator(opt_g)
            
        # Kayıpları ve puanları kaydedin, ekleyin
        losses_g.append(loss_g)
        losses_d.append(loss_d)
        real_scores.append(real_score)
        fake_scores.append(fake_score)
        
        # Günlük kayıpları ve puanları (son grup)
        print("Epoch [{}/{}], loss_g: {:.4f}, loss_d: {:.4f}, real_score: {:.4f}, fake_score: {:.4f}".format(
            epoch+1, epochs, loss_g, loss_d, real_score, fake_score))
    
        # Oluşturulan görüntüleri kaydet
        save_samples(epoch+start_idx, fixed_latent, show=False)
    
    return losses_g, losses_d, real_scores, fake_scores

lr = 0.0002
epochs = 250

# burada jovian kütüphanesi kullanıldı.
# joviana üye oılmamız lazım  ama kolay.
# github ile otomatik bağlanıyoruz.
jovian.reset()
jovian.log_hyperparams(lr=lr, epochs=epochs)

history = fit(epochs, lr) #ve artık eğitim aşamasına geçiyoruz. burası uzun sürebilir yarım saat kadar.

losses_g, losses_d, real_scores, fake_scores = history #değer ataması

# kayıtlara değer ataması
jovian.log_metrics(loss_g=losses_g[-1], 
                   loss_d=losses_d[-1], 
                   real_score=real_scores[-1], 
                   fake_score=fake_scores[-1])

real_scores

# verilerin ortalamasını alıyoruz.
i=0
averages=[]
while(i<250): 
  ls=real_scores[i:i+10]
  i+=11
  x=sum(ls) / len(ls)
  averages.append(x)

# sahte paraların ortalamasını alıyoruz. (değerler eğitim aşamasından alınıyor)
j=0
avgs=[]
while(j<250): 
  lss=fake_scores[j:j+10]
  j+=11
  y=sum(lss) / len(lss)
  avgs.append(y)

# grafiğe döken kod
plt.plot(avgs)
plt.xlabel("epochs")
plt.ylabel("Average fake scores")
plt.show()

# gerçek paraların grafik gösterimi
plt.plot(averages)
plt.xlabel("epochs")
plt.ylabel("Average real scores")
plt.show()

# hem sahte hem gerçeğin ortama değerleri grafiği
plt.plot(averages)
plt.plot(avgs)
plt.xlabel("epochs")
plt.ylabel("Average scores")
plt.show()

#  ortalama alınıyor
i=0
ls_d=[]
while(i<250): 
  ls=losses_d[i:i+10]
  i+=11
  x=sum(ls) / len(ls)
  ls_d.append(x)

# başarısız ortalama alınıyor
i=0
ls_g=[]
while(i<250): 
  ls=losses_g[i:i+10]
  i+=11
  x=sum(ls) / len(ls)
  ls_g.append(x)

#grafiğe döküm
plt.plot(ls_g)
plt.xlabel("epochs")
plt.ylabel("Average generator losses")
plt.show()

#grafiğe döküm
plt.plot(ls_d)
plt.xlabel("epochs")
plt.ylabel("Average descriminator losses")
plt.show()

#grafiğe döküm
plt.plot(ls_d)
plt.plot(ls_g)
plt.xlabel("epochs")
plt.ylabel("Average losses")
plt.show()

# Model kontrol noktalarını kaydedin
torch.save(generator.state_dict(), 'G.ckpt')
torch.save(discriminator.state_dict(), 'D.ckpt')

Image('./generated/generated-images-0001.png') # kaydedilen resimleri çağırıypruz görmek için... hepsi aynı mantıkta...

Image('./generated/generated-images-0005.png')

Image('./generated/generated-images-0010.png')

Image('./generated/generated-images-0030.png')

Image('./generated/generated-images-0050.png')

# video olarakta yazıyor kaydediyoruz.
vid_fname = 'gans_training.avi'

files = [os.path.join(sample_dir, f) for f in os.listdir(sample_dir) if 'generated' in f]
files.sort()

out = cv2.VideoWriter(vid_fname,cv2.VideoWriter_fourcc(*'MP4V'), 1, (530,530))
[out.write(cv2.imread(fname)) for fname in files]
out.release()

# hepsini bir arada görmek için
plt.plot(losses_d, '-')
plt.plot(losses_g, '-')
plt.xlabel('epoch')
plt.ylabel('loss')
plt.legend(['Discriminator', 'Generator'])
plt.title('Losses');

# heps ibir arada
plt.plot(real_scores, '-')
plt.plot(fake_scores, '-')
plt.xlabel('epoch')
plt.ylabel('score')
plt.legend(['Real', 'Fake'])
plt.title('Scores');